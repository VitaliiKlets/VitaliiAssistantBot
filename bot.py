import os
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∑ Environment Variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! üëã –Ø —Ç–≤—ñ–π –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ ChatGPT. –ú–æ–∂–µ—à –ø–∏—Å–∞—Ç–∏ –º–µ–Ω—ñ –±—É–¥—å-—è–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–µ—Ä–µ–∑ OpenAI
async def chat_with_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4-mini",  # –º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ gpt-4 –∞–±–æ gpt-3.5-turbo
            messages=[
                {"role": "system", "content": "–¢–∏ –≤–≤—ñ—á–ª–∏–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫."},
                {"role": "user", "content": user_text}
            ]
        )
        answer = response['choices'][0]['message']['content']
    except Exception as e:
        answer = "–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç–≤–æ—î—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."

    await update.message.reply_text(answer)

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_with_gpt))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
